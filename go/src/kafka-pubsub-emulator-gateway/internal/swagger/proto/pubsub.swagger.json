{
  "swagger": "2.0",
  "info": {
    "title": "proto/pubsub.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{name}": {
      "put": {
        "summary": "Creates the given topic with the given name.",
        "operationId": "CreateTopic",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Topic"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Topic"
            }
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/v1/{project}/snapshots": {
      "get": {
        "summary": "Lists the existing snapshots.",
        "operationId": "ListSnapshots",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1ListSnapshotsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Maximum number of snapshots to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The value returned by the last `ListSnapshotsResponse`; indicates that this\nis a continuation of a prior `ListSnapshots` call, and that the system\nshould return the next page of data.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{project}/subscriptions": {
      "get": {
        "summary": "Lists matching subscriptions.",
        "operationId": "ListSubscriptions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Maximum number of subscriptions to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The value returned by the last `ListSubscriptionsResponse`; indicates that\nthis is a continuation of a prior `ListSubscriptions` call, and that the\nsystem should return the next page of data.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{project}/topics": {
      "get": {
        "summary": "Lists matching topics.",
        "operationId": "ListTopics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1ListTopicsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Maximum number of topics to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The value returned by the last `ListTopicsResponse`; indicates that this is\na continuation of a prior `ListTopics` call, and that the system should\nreturn the next page of data.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/v1/{snapshot.name}": {
      "patch": {
        "summary": "Updates an existing snapshot. Note that certain properties of a snapshot\nare not modifiable.\nNOTE:  The style guide requires body: \"snapshot\" instead of body: \"*\".\nKeeping the latter for internal consistency in V1, however it should be\ncorrected in V2.  See\nhttps://cloud.google.com/apis/design/standard_methods#update for details.",
        "operationId": "UpdateSnapshot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Snapshot"
            }
          }
        },
        "parameters": [
          {
            "name": "snapshot.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateSnapshotRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{snapshot}": {
      "delete": {
        "summary": "Removes an existing snapshot. All messages retained in the snapshot\nare immediately dropped. After a snapshot is deleted, a new one may be\ncreated with the same name, but the new one has no association with the old\nsnapshot or its subscription, unless the same subscription is specified.",
        "operationId": "DeleteSnapshot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "snapshot",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription.name}": {
      "patch": {
        "summary": "Updates an existing subscription. Note that certain properties of a\nsubscription, such as its topic, are not modifiable.\nNOTE:  The style guide requires body: \"subscription\" instead of body: \"*\".\nKeeping the latter for internal consistency in V1, however it should be\ncorrected in V2.  See\nhttps://cloud.google.com/apis/design/standard_methods#update for details.",
        "operationId": "UpdateSubscription",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Subscription"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}": {
      "get": {
        "summary": "Gets the configuration details of a subscription.",
        "operationId": "GetSubscription",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Subscription"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriber"
        ]
      },
      "delete": {
        "summary": "Deletes an existing subscription. All messages retained in the subscription\nare immediately dropped. Calls to `Pull` after deletion will return\n`NOT_FOUND`. After a subscription is deleted, a new one may be created with\nthe same name, but the new one has no association with the old\nsubscription or its topic unless the same topic is specified.",
        "operationId": "DeleteSubscription",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}:acknowledge": {
      "post": {
        "summary": "Acknowledges the messages associated with the `ack_ids` in the\n`AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages\nfrom the subscription.",
        "description": "Acknowledging a message whose ack deadline has expired may succeed,\nbut such a message may be redelivered later. Acknowledging a message more\nthan once will not result in an error.",
        "operationId": "Acknowledge",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AcknowledgeRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}:modifyAckDeadline": {
      "post": {
        "summary": "Modifies the ack deadline for a specific message. This method is useful\nto indicate that more time is needed to process a message by the\nsubscriber, or to make the message available for redelivery if the\nprocessing was interrupted. Note that this does not modify the\nsubscription-level `ackDeadlineSeconds` used for subsequent messages.",
        "operationId": "ModifyAckDeadline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ModifyAckDeadlineRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}:modifyPushConfig": {
      "post": {
        "summary": "Modifies the `PushConfig` for a specified subscription.",
        "description": "This may be used to change a push subscription to a pull one (signified by\nan empty `PushConfig`) or vice versa, or change the endpoint URL and other\nattributes of a push subscription. Messages will accumulate for delivery\ncontinuously through the call regardless of changes to the `PushConfig`.",
        "operationId": "ModifyPushConfig",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ModifyPushConfigRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}:pull": {
      "post": {
        "summary": "Pulls messages from the server. Returns an empty list if there are no\nmessages available in the backlog. The server may return `UNAVAILABLE` if\nthere are too many concurrent pull requests pending for the given\nsubscription.",
        "operationId": "Pull",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1PullResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PullRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{subscription}:seek": {
      "post": {
        "summary": "Seeks an existing subscription to a point in time or to a given snapshot,\nwhichever is provided in the request.",
        "operationId": "Seek",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1SeekResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SeekRequest"
            }
          }
        ],
        "tags": [
          "Subscriber"
        ]
      }
    },
    "/v1/{topic.name}": {
      "patch": {
        "summary": "Updates an existing topic. Note that certain properties of a topic are not\nmodifiable.  Options settings follow the style guide:\nNOTE:  The style guide requires body: \"topic\" instead of body: \"*\".\nKeeping the latter for internal consistency in V1, however it should be\ncorrected in V2.  See\nhttps://cloud.google.com/apis/design/standard_methods#update for details.",
        "operationId": "UpdateTopic",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Topic"
            }
          }
        },
        "parameters": [
          {
            "name": "topic.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateTopicRequest"
            }
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/v1/{topic}": {
      "get": {
        "summary": "Gets the configuration of a topic.",
        "operationId": "GetTopic",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1Topic"
            }
          }
        },
        "parameters": [
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Publisher"
        ]
      },
      "delete": {
        "summary": "Deletes the topic with the given name. Returns `NOT_FOUND` if the topic\ndoes not exist. After a topic is deleted, a new topic may be created with\nthe same name; this is an entirely new topic with none of the old\nconfiguration or subscriptions. Existing subscriptions to this topic are\nnot deleted, but their `topic` field is set to `_deleted-topic_`.",
        "operationId": "DeleteTopic",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/v1/{topic}/subscriptions": {
      "get": {
        "summary": "Lists the name of the subscriptions for this topic.",
        "operationId": "ListTopicSubscriptions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1ListTopicSubscriptionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Maximum number of subscription names to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The value returned by the last `ListTopicSubscriptionsResponse`; indicates\nthat this is a continuation of a prior `ListTopicSubscriptions` call, and\nthat the system should return the next page of data.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/v1/{topic}:publish": {
      "post": {
        "summary": "Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic\ndoes not exist. The message payload must not be empty; it must contain\n either a non-empty data field, or at least one attribute.",
        "operationId": "Publish",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/v1PublishResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PublishRequest"
            }
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    }
  },
  "definitions": {
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of the all the API methods, which have any FieldMask type\nfield in the request, should verify the included field paths, and return\n`INVALID_ARGUMENT` error if any path is duplicated or unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1AcknowledgeRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string",
          "description": "The subscription whose message is being acknowledged.\nFormat is `projects/{project}/subscriptions/{sub}`."
        },
        "ack_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The acknowledgment ID for the messages being acknowledged that was returned\nby the Pub/Sub system in the `Pull` response. Must not be empty."
        }
      },
      "description": "Request for the Acknowledge method."
    },
    "v1CreateSnapshotRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional user-provided name for this snapshot.\nIf the name is not provided in the request, the server will assign a random\nname for this snapshot on the same project as the subscription.\nNote that for REST API requests, you must specify a name.\nFormat is `projects/{project}/snapshots/{snap}`."
        },
        "subscription": {
          "type": "string",
          "description": "The subscription whose backlog the snapshot retains.\nSpecifically, the created snapshot is guaranteed to retain:\n (a) The existing backlog on the subscription. More precisely, this is\n     defined as the messages in the subscription's backlog that are\n     unacknowledged upon the successful completion of the\n     `CreateSnapshot` request; as well as:\n (b) Any messages published to the subscription's topic following the\n     successful completion of the CreateSnapshot request.\nFormat is `projects/{project}/subscriptions/{sub}`."
        }
      },
      "description": "Request for the `CreateSnapshot` method."
    },
    "v1ListSnapshotsResponse": {
      "type": "object",
      "properties": {
        "snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Snapshot"
          },
          "description": "The resulting snapshots."
        },
        "next_page_token": {
          "type": "string",
          "description": "If not empty, indicates that there may be more snapshot that match the\nrequest; this value should be passed in a new `ListSnapshotsRequest`."
        }
      },
      "description": "Response for the `ListSnapshots` method."
    },
    "v1ListSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subscription"
          },
          "description": "The subscriptions that match the request."
        },
        "next_page_token": {
          "type": "string",
          "description": "If not empty, indicates that there may be more subscriptions that match\nthe request; this value should be passed in a new\n`ListSubscriptionsRequest` to get more subscriptions."
        }
      },
      "description": "Response for the `ListSubscriptions` method."
    },
    "v1ListTopicSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The names of the subscriptions that match the request."
        },
        "next_page_token": {
          "type": "string",
          "description": "If not empty, indicates that there may be more subscriptions that match\nthe request; this value should be passed in a new\n`ListTopicSubscriptionsRequest` to get more subscriptions."
        }
      },
      "description": "Response for the `ListTopicSubscriptions` method."
    },
    "v1ListTopicsResponse": {
      "type": "object",
      "properties": {
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Topic"
          },
          "description": "The resulting topics."
        },
        "next_page_token": {
          "type": "string",
          "description": "If not empty, indicates that there may be more topics that match the\nrequest; this value should be passed in a new `ListTopicsRequest`."
        }
      },
      "description": "Response for the `ListTopics` method."
    },
    "v1ModifyAckDeadlineRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string",
          "description": "The name of the subscription.\nFormat is `projects/{project}/subscriptions/{sub}`."
        },
        "ack_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of acknowledgment IDs."
        },
        "ack_deadline_seconds": {
          "type": "integer",
          "format": "int32",
          "description": "The new ack deadline with respect to the time this request was sent to\nthe Pub/Sub system. For example, if the value is 10, the new\nack deadline will expire 10 seconds after the `ModifyAckDeadline` call\nwas made. Specifying zero may immediately make the message available for\nanother pull request.\nThe minimum deadline you can specify is 0 seconds.\nThe maximum deadline you can specify is 600 seconds (10 minutes)."
        }
      },
      "description": "Request for the ModifyAckDeadline method."
    },
    "v1ModifyPushConfigRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string",
          "description": "The name of the subscription.\nFormat is `projects/{project}/subscriptions/{sub}`."
        },
        "push_config": {
          "$ref": "#/definitions/v1PushConfig",
          "description": "The push configuration for future deliveries.\n\nAn empty `pushConfig` indicates that the Pub/Sub system should\nstop pushing messages from the given subscription and allow\nmessages to be pulled and acknowledged - effectively pausing\nthe subscription if `Pull` is not called."
        }
      },
      "description": "Request for the ModifyPushConfig method."
    },
    "v1PublishRequest": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The messages in the request will be published on this topic.\nFormat is `projects/{project}/topics/{topic}`."
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PubsubMessage"
          },
          "description": "The messages to publish."
        }
      },
      "description": "Request for the Publish method."
    },
    "v1PublishResponse": {
      "type": "object",
      "properties": {
        "message_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The server-assigned ID of each published message, in the same order as\nthe messages in the request. IDs are guaranteed to be unique within\nthe topic."
        }
      },
      "description": "Response for the `Publish` method."
    },
    "v1PubsubMessage": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The message payload."
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional attributes for this message."
        },
        "message_id": {
          "type": "string",
          "description": "ID of this message, assigned by the server when the message is published.\nGuaranteed to be unique within the topic. This value may be read by a\nsubscriber that receives a `PubsubMessage` via a `Pull` call or a push\ndelivery. It must not be populated by the publisher in a `Publish` call."
        },
        "publish_time": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the message was published, populated by the server when\nit receives the `Publish` call. It must not be populated by the\npublisher in a `Publish` call."
        }
      },
      "description": "A message data and its attributes. The message payload must not be empty;\nit must contain either a non-empty data field, or at least one attribute."
    },
    "v1PullRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string",
          "description": "The subscription from which messages should be pulled.\nFormat is `projects/{project}/subscriptions/{sub}`."
        },
        "return_immediately": {
          "type": "boolean",
          "format": "boolean",
          "description": "If this field set to true, the system will respond immediately even if\nit there are no messages available to return in the `Pull` response.\nOtherwise, the system may wait (for a bounded amount of time) until at\nleast one message is available, rather than returning no messages. The\nclient may cancel the request if it does not wish to wait any longer for\nthe response."
        },
        "max_messages": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of messages returned for this request. The Pub/Sub\nsystem may return fewer than the number specified."
        }
      },
      "description": "Request for the `Pull` method."
    },
    "v1PullResponse": {
      "type": "object",
      "properties": {
        "received_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReceivedMessage"
          },
          "description": "Received Pub/Sub messages. The Pub/Sub system will return zero messages if\nthere are no more available in the backlog. The Pub/Sub system may return\nfewer than the `maxMessages` requested even if there are more messages\navailable in the backlog."
        }
      },
      "description": "Response for the `Pull` method."
    },
    "v1PushConfig": {
      "type": "object",
      "properties": {
        "push_endpoint": {
          "type": "string",
          "description": "A URL locating the endpoint to which messages should be pushed.\nFor example, a Webhook endpoint might use \"https://example.com/push\"."
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Endpoint configuration attributes.\n\nEvery endpoint has a set of API supported attributes that can be used to\ncontrol different aspects of the message delivery.\n\nThe currently supported attribute is `x-goog-version`, which you can\nuse to change the format of the pushed message. This attribute\nindicates the version of the data expected by the endpoint. This\ncontrols the shape of the pushed message (i.e., its fields and metadata).\nThe endpoint version is based on the version of the Pub/Sub API.\n\nIf not present during the `CreateSubscription` call, it will default to\nthe version of the API used to make such call. If not present during a\n`ModifyPushConfig` call, its value will not be changed. `GetSubscription`\ncalls will always return a valid version, even if the subscription was\ncreated without this attribute.\n\nThe possible values for this attribute are:\n\n* `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.\n* `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API."
        }
      },
      "description": "Configuration for a push delivery endpoint."
    },
    "v1ReceivedMessage": {
      "type": "object",
      "properties": {
        "ack_id": {
          "type": "string",
          "description": "This ID can be used to acknowledge the received message."
        },
        "message": {
          "$ref": "#/definitions/v1PubsubMessage",
          "description": "The message."
        }
      },
      "description": "A message and its corresponding acknowledgment ID."
    },
    "v1SeekRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string",
          "description": "The subscription to affect."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "The time to seek to.\nMessages retained in the subscription that were published before this\ntime are marked as acknowledged, and messages retained in the\nsubscription that were published after this time are marked as\nunacknowledged. Note that this operation affects only those messages\nretained in the subscription (configured by the combination of\n`message_retention_duration` and `retain_acked_messages`). For example,\nif `time` corresponds to a point before the message retention\nwindow (or to a point before the system's notion of the subscription\ncreation time), only retained messages will be marked as unacknowledged,\nand already-expunged messages will not be restored."
        },
        "snapshot": {
          "type": "string",
          "description": "The snapshot to seek to. The snapshot's topic must be the same as that of\nthe provided subscription.\nFormat is `projects/{project}/snapshots/{snap}`."
        }
      },
      "description": "Request for the `Seek` method."
    },
    "v1SeekResponse": {
      "type": "object"
    },
    "v1Snapshot": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the snapshot."
        },
        "topic": {
          "type": "string",
          "description": "The name of the topic from which this snapshot is retaining messages."
        },
        "expire_time": {
          "type": "string",
          "format": "date-time",
          "description": "The snapshot is guaranteed to exist up until this time.\nA newly-created snapshot expires no later than 7 days from the time of its\ncreation. Its exact lifetime is determined at creation by the existing\nbacklog in the source subscription. Specifically, the lifetime of the\nsnapshot is `7 days - (age of oldest unacked message in the subscription)`.\nFor example, consider a subscription whose oldest unacked message is 3 days\nold. If a snapshot is created from this subscription, the snapshot -- which\nwill always capture this 3-day-old backlog as long as the snapshot\nexists -- will expire in 4 days."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User labels."
        }
      },
      "description": "A snapshot resource."
    },
    "v1StreamingPullResponse": {
      "type": "object",
      "properties": {
        "received_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReceivedMessage"
          },
          "description": "Received Pub/Sub messages. This will not be empty."
        }
      },
      "description": "Response for the `StreamingPull` method. This response is used to stream\nmessages from the server to the client."
    },
    "v1Subscription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the subscription. It must have the format\n`\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must\nstart with a letter, and contain only letters (`[A-Za-z]`), numbers\n(`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),\nplus (`+`) or percent signs (`%`). It must be between 3 and 255 characters\nin length, and it must not start with `\"goog\"`."
        },
        "topic": {
          "type": "string",
          "description": "The name of the topic from which this subscription is receiving messages.\nFormat is `projects/{project}/topics/{topic}`.\nThe value of this field will be `_deleted-topic_` if the topic has been\ndeleted."
        },
        "push_config": {
          "$ref": "#/definitions/v1PushConfig",
          "description": "If push delivery is used with this subscription, this field is\nused to configure it. An empty `pushConfig` signifies that the subscriber\nwill pull and ack messages using API methods."
        },
        "ack_deadline_seconds": {
          "type": "integer",
          "format": "int32",
          "description": "This value is the maximum time after a subscriber receives a message\nbefore the subscriber should acknowledge the message. After message\ndelivery but before the ack deadline expires and before the message is\nacknowledged, it is an outstanding message and will not be delivered\nagain during that time (on a best-effort basis).\n\nFor pull subscriptions, this value is used as the initial value for the ack\ndeadline. To override this value for a given message, call\n`ModifyAckDeadline` with the corresponding `ack_id` if using\npull.\nThe minimum custom deadline you can specify is 10 seconds.\nThe maximum custom deadline you can specify is 600 seconds (10 minutes).\nIf this parameter is 0, a default value of 10 seconds is used.\n\nFor push delivery, this value is also used to set the request timeout for\nthe call to the push endpoint.\n\nIf the subscriber never acknowledges the message, the Pub/Sub\nsystem will eventually redeliver the message."
        },
        "retain_acked_messages": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether to retain acknowledged messages. If true, then\nmessages are not expunged from the subscription's backlog, even if they are\nacknowledged, until they fall out of the `message_retention_duration`\nwindow."
        },
        "message_retention_duration": {
          "type": "string",
          "description": "How long to retain unacknowledged messages in the subscription's backlog,\nfrom the moment a message is published.\nIf `retain_acked_messages` is true, then this also configures the retention\nof acknowledged messages, and thus configures how far back in time a `Seek`\ncan be done. Defaults to 7 days. Cannot be more than 7 days or less than 10\nminutes."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User labels."
        }
      },
      "description": "A subscription resource."
    },
    "v1Topic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the topic. It must have the format\n`\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter,\nand contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),\nunderscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent\nsigns (`%`). It must be between 3 and 255 characters in length, and it\nmust not start with `\"goog\"`."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User labels."
        }
      },
      "description": "A topic resource."
    },
    "v1UpdateSnapshotRequest": {
      "type": "object",
      "properties": {
        "snapshot": {
          "$ref": "#/definitions/v1Snapshot",
          "description": "The updated snpashot object."
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "Indicates which fields in the provided snapshot to update.\nMust be specified and non-empty."
        }
      },
      "description": "Request for the UpdateSnapshot method."
    },
    "v1UpdateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/v1Subscription",
          "description": "The updated subscription object."
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "Indicates which fields in the provided subscription to update.\nMust be specified and non-empty."
        }
      },
      "description": "Request for the UpdateSubscription method."
    },
    "v1UpdateTopicRequest": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/v1Topic",
          "description": "The topic to update."
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "Indicates which fields in the provided topic to update.\nMust be specified and non-empty."
        }
      },
      "description": "Request for the UpdateTopic method."
    }
  }
}
