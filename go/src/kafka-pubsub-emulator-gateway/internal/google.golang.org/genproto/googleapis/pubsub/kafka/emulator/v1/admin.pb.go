// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/admin.proto

/*
Package admin is a generated protocol buffer package.

It is generated from these files:
	proto/admin.proto

It has these top-level messages:
	ConfigurationRequest
	ConfigurationResponse
	StatisticsRequest
	StatisticsResponse
	StatisticsConsolidation
	Metric
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigurationResponse_Extension int32

const (
	ConfigurationResponse_YAML ConfigurationResponse_Extension = 0
)

var ConfigurationResponse_Extension_name = map[int32]string{
	0: "YAML",
}
var ConfigurationResponse_Extension_value = map[string]int32{
	"YAML": 0,
}

func (x ConfigurationResponse_Extension) String() string {
	return proto.EnumName(ConfigurationResponse_Extension_name, int32(x))
}
func (ConfigurationResponse_Extension) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type ConfigurationRequest struct {
}

func (m *ConfigurationRequest) Reset()                    { *m = ConfigurationRequest{} }
func (m *ConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationRequest) ProtoMessage()               {}
func (*ConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConfigurationResponse struct {
	Content   string                          `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Extension ConfigurationResponse_Extension `protobuf:"varint,2,opt,name=extension,enum=google.pubsub.kafka.emulator.ConfigurationResponse_Extension" json:"extension,omitempty"`
}

func (m *ConfigurationResponse) Reset()                    { *m = ConfigurationResponse{} }
func (m *ConfigurationResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationResponse) ProtoMessage()               {}
func (*ConfigurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigurationResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ConfigurationResponse) GetExtension() ConfigurationResponse_Extension {
	if m != nil {
		return m.Extension
	}
	return ConfigurationResponse_YAML
}

type StatisticsRequest struct {
}

func (m *StatisticsRequest) Reset()                    { *m = StatisticsRequest{} }
func (m *StatisticsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatisticsRequest) ProtoMessage()               {}
func (*StatisticsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatisticsResponse struct {
	PublisherExecutors  int32                               `protobuf:"varint,1,opt,name=publisherExecutors" json:"publisherExecutors,omitempty"`
	SubscriberExecutors int32                               `protobuf:"varint,2,opt,name=subscriberExecutors" json:"subscriberExecutors,omitempty"`
	PublisherByTopic    map[string]*StatisticsConsolidation `protobuf:"bytes,3,rep,name=publisherByTopic" json:"publisherByTopic,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubscriberByTopic   map[string]*StatisticsConsolidation `protobuf:"bytes,4,rep,name=subscriberByTopic" json:"subscriberByTopic,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatisticsResponse) Reset()                    { *m = StatisticsResponse{} }
func (m *StatisticsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatisticsResponse) ProtoMessage()               {}
func (*StatisticsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatisticsResponse) GetPublisherExecutors() int32 {
	if m != nil {
		return m.PublisherExecutors
	}
	return 0
}

func (m *StatisticsResponse) GetSubscriberExecutors() int32 {
	if m != nil {
		return m.SubscriberExecutors
	}
	return 0
}

func (m *StatisticsResponse) GetPublisherByTopic() map[string]*StatisticsConsolidation {
	if m != nil {
		return m.PublisherByTopic
	}
	return nil
}

func (m *StatisticsResponse) GetSubscriberByTopic() map[string]*StatisticsConsolidation {
	if m != nil {
		return m.SubscriberByTopic
	}
	return nil
}

type StatisticsConsolidation struct {
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *StatisticsConsolidation) Reset()                    { *m = StatisticsConsolidation{} }
func (m *StatisticsConsolidation) String() string            { return proto.CompactTextString(m) }
func (*StatisticsConsolidation) ProtoMessage()               {}
func (*StatisticsConsolidation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatisticsConsolidation) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Metric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigurationRequest)(nil), "google.pubsub.kafka.emulator.ConfigurationRequest")
	proto.RegisterType((*ConfigurationResponse)(nil), "google.pubsub.kafka.emulator.ConfigurationResponse")
	proto.RegisterType((*StatisticsRequest)(nil), "google.pubsub.kafka.emulator.StatisticsRequest")
	proto.RegisterType((*StatisticsResponse)(nil), "google.pubsub.kafka.emulator.StatisticsResponse")
	proto.RegisterType((*StatisticsConsolidation)(nil), "google.pubsub.kafka.emulator.StatisticsConsolidation")
	proto.RegisterType((*Metric)(nil), "google.pubsub.kafka.emulator.Metric")
	proto.RegisterEnum("google.pubsub.kafka.emulator.ConfigurationResponse_Extension", ConfigurationResponse_Extension_name, ConfigurationResponse_Extension_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	// Checks metrics from pub/sub emulator
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	// Get current configuration of pub/sub emulator
	Configuration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := grpc.Invoke(ctx, "/google.pubsub.kafka.emulator.Admin/Statistics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Configuration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := grpc.Invoke(ctx, "/google.pubsub.kafka.emulator.Admin/Configuration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// Checks metrics from pub/sub emulator
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	// Get current configuration of pub/sub emulator
	Configuration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.pubsub.kafka.emulator.Admin/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Configuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Configuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.pubsub.kafka.emulator.Admin/Configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Configuration(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.pubsub.kafka.emulator.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Statistics",
			Handler:    _Admin_Statistics_Handler,
		},
		{
			MethodName: "Configuration",
			Handler:    _Admin_Configuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin.proto",
}

func init() { proto.RegisterFile("proto/admin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0x92, 0xb6, 0x64, 0x22, 0x50, 0xb2, 0x4d, 0xd2, 0x10, 0x55, 0x22, 0xb2, 0x38,
	0xe4, 0xe4, 0x6d, 0x53, 0x21, 0x21, 0x10, 0x48, 0x6d, 0x49, 0x39, 0x40, 0x25, 0xe4, 0xf6, 0x52,
	0x38, 0xad, 0x9d, 0xad, 0x59, 0xc5, 0xd9, 0x35, 0xde, 0x75, 0xd4, 0xc0, 0x8d, 0x3b, 0x27, 0x4e,
	0x3c, 0x00, 0x4f, 0xc0, 0xa3, 0x70, 0xe3, 0xcc, 0x83, 0x20, 0xef, 0xc6, 0x4d, 0x48, 0x4c, 0xd4,
	0x70, 0xe0, 0xb6, 0x9e, 0xd9, 0xf9, 0xff, 0x6f, 0xec, 0xf1, 0x40, 0x2d, 0x8a, 0x85, 0x12, 0x98,
	0x0c, 0x46, 0x8c, 0x3b, 0xfa, 0x8c, 0x76, 0x03, 0x21, 0x82, 0x90, 0x3a, 0x51, 0xe2, 0xc9, 0xc4,
	0x73, 0x86, 0xe4, 0x72, 0x48, 0x1c, 0x3a, 0x4a, 0x42, 0xa2, 0x44, 0xdc, 0x9e, 0x66, 0x31, 0x89,
	0x18, 0x26, 0x9c, 0x0b, 0x45, 0x14, 0x13, 0x5c, 0x9a, 0x5a, 0xbb, 0x09, 0xf5, 0x63, 0xc1, 0x2f,
	0x59, 0x90, 0xc4, 0x3a, 0xee, 0xd2, 0xf7, 0x09, 0x95, 0xca, 0xfe, 0x66, 0x41, 0x63, 0x21, 0x21,
	0x23, 0xc1, 0x25, 0x45, 0x2d, 0xd8, 0xf2, 0x05, 0x57, 0x94, 0xab, 0x96, 0xd5, 0xb1, 0xba, 0x65,
	0x37, 0x7b, 0x44, 0x6f, 0xa1, 0x4c, 0xaf, 0x14, 0xe5, 0x92, 0x09, 0xde, 0x2a, 0x74, 0xac, 0xee,
	0xdd, 0xde, 0x53, 0x67, 0x15, 0x9b, 0x93, 0xeb, 0xe0, 0xf4, 0x33, 0x11, 0x77, 0xa6, 0x67, 0x37,
	0xa0, 0x7c, 0x1d, 0x47, 0xb7, 0xa1, 0x74, 0x71, 0x78, 0xfa, 0xaa, 0x7a, 0xcb, 0xde, 0x86, 0xda,
	0x59, 0xda, 0x91, 0x54, 0xcc, 0x97, 0x19, 0xfc, 0xcf, 0x12, 0xa0, 0xf9, 0xe8, 0x94, 0xdc, 0x01,
	0x14, 0x25, 0x5e, 0xc8, 0xe4, 0x3b, 0x1a, 0xf7, 0xaf, 0xa8, 0x9f, 0x28, 0x11, 0x4b, 0xdd, 0xc4,
	0x86, 0x9b, 0x93, 0x41, 0x7b, 0xb0, 0x2d, 0x13, 0x4f, 0xfa, 0x31, 0xf3, 0xe6, 0x0b, 0x0a, 0xba,
	0x20, 0x2f, 0x85, 0x62, 0xa8, 0x5e, 0xeb, 0x1c, 0x4d, 0xce, 0x45, 0xc4, 0xfc, 0x56, 0xb1, 0x53,
	0xec, 0x56, 0x7a, 0x27, 0xab, 0x5f, 0xc4, 0x32, 0xad, 0xf3, 0x7a, 0x41, 0xa8, 0xcf, 0x55, 0x3c,
	0x71, 0x97, 0xf4, 0x51, 0x02, 0xb5, 0x19, 0x4a, 0x66, 0x5a, 0xd2, 0xa6, 0x2f, 0xd6, 0x36, 0x3d,
	0x5b, 0x54, 0x32, 0xae, 0xcb, 0x0e, 0xed, 0x0f, 0xd0, 0xc8, 0x25, 0x44, 0x55, 0x28, 0x0e, 0xe9,
	0x64, 0x3a, 0x1b, 0xe9, 0x11, 0xbd, 0x84, 0x8d, 0x31, 0x09, 0x13, 0xaa, 0xdf, 0x5c, 0xa5, 0xf7,
	0xf0, 0xa6, 0x54, 0xc7, 0x82, 0x4b, 0x11, 0xb2, 0x81, 0x99, 0x0e, 0xa3, 0xf1, 0xb8, 0xf0, 0xc8,
	0x6a, 0x7f, 0x84, 0x66, 0x3e, 0xe8, 0x7f, 0x30, 0xb7, 0x2f, 0x60, 0xe7, 0x2f, 0xb7, 0xd0, 0x33,
	0xd8, 0x1a, 0x51, 0x15, 0x33, 0x3f, 0x9d, 0xaa, 0xf4, 0x03, 0x3c, 0x58, 0xed, 0x76, 0xaa, 0x2f,
	0xbb, 0x59, 0x91, 0x7d, 0x0e, 0x9b, 0x26, 0x84, 0x10, 0x94, 0x38, 0x19, 0xd1, 0x69, 0x23, 0xfa,
	0x8c, 0x3a, 0x50, 0x19, 0xd0, 0xb4, 0xe9, 0x48, 0x65, 0x3f, 0x58, 0xd9, 0x9d, 0x0f, 0xa1, 0x7a,
	0xd6, 0x6b, 0x51, 0xe7, 0xcc, 0x43, 0xef, 0x7b, 0x01, 0x36, 0x0e, 0xd3, 0x75, 0x81, 0x3e, 0x5b,
	0x00, 0x33, 0x76, 0x84, 0x6f, 0x3e, 0x1e, 0xfa, 0xbf, 0x6a, 0xef, 0xad, 0x3b, 0x4f, 0xf6, 0xee,
	0xa7, 0x1f, 0xbf, 0xbe, 0x14, 0x9a, 0xa8, 0x8e, 0xc7, 0xfb, 0x66, 0x67, 0x61, 0x39, 0x03, 0xf8,
	0x6a, 0xc1, 0x9d, 0x3f, 0x56, 0x00, 0xea, 0xad, 0xb5, 0x2f, 0x0c, 0xd5, 0xc1, 0x3f, 0xec, 0x18,
	0xfb, 0xbe, 0x06, 0xbb, 0x87, 0x76, 0x66, 0x60, 0xfe, 0xfc, 0xc5, 0xa3, 0x93, 0x37, 0xcf, 0xa7,
	0xb2, 0x81, 0x08, 0x09, 0x0f, 0x1c, 0x11, 0x07, 0x38, 0xa0, 0xdc, 0xac, 0x5f, 0x93, 0x22, 0x11,
	0x93, 0xd8, 0xb8, 0x62, 0xed, 0x8a, 0x33, 0x57, 0x3c, 0xde, 0x7f, 0xa2, 0x55, 0xbd, 0x4d, 0x5d,
	0x70, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x29, 0xa8, 0x19, 0xb8, 0x05, 0x00, 0x00,
}
